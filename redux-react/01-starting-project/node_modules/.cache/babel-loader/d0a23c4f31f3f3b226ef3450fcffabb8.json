{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggoleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // 리듀서의 값이 단일 리듀서가 될 수 있다.\n// slice가 여러개이더라도 리덕스 스토어는 하나만 존재할 수 있다.\n// 개별적인 여러개의 reducer를 입력하면 나중에 하나의 주요 리듀서로 자동으로 합쳐진다.\n// 그리고 주요 리듀서를 스토어에 노출한다.\n\nconst store = configureStore({\n  reducer: {\n    auth: authSlice.reducer,\n    counter: counterSlice.reducer\n  }\n}); //전역으로 액션 객체를 생성한다. 원하는 메서드만 뽑아 와 사용할 수 있게 함.\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","logout","initialCounterState","counter","showCounter","counterSlice","increment","decrement","increase","action","payload","toggoleCounter","store","reducer","auth","counterActions","actions","authActions"],"sources":["C:/redux/redux-react/01-starting-project/src/store/store.js"],"sourcesContent":["\r\nimport { createSlice, configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialAuthState = {\r\n  isAuthenticated: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'authentication',\r\n  initialState: initialAuthState,\r\n  reducers: {\r\n    login(state){\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state){\r\n      state.isAuthenticated = false;\r\n    }\r\n  }\r\n})\r\n\r\n\r\nconst initialCounterState = { counter : 0, showCounter: true};\r\n\r\nconst counterSlice = createSlice(\r\n  {\r\n    name: 'counter',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n\r\n      increment(state){\r\n        state.counter++;\r\n      },\r\n      decrement(state){\r\n        state.counter--;\r\n      },\r\n      increase(state, action){\r\n        state.counter = state.counter + action.payload\r\n      },\r\n      toggoleCounter(state){\r\n        state.showCounter = !state.showCounter\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n\r\n\r\n\r\n// 리듀서의 값이 단일 리듀서가 될 수 있다.\r\n// slice가 여러개이더라도 리덕스 스토어는 하나만 존재할 수 있다.\r\n// 개별적인 여러개의 reducer를 입력하면 나중에 하나의 주요 리듀서로 자동으로 합쳐진다.\r\n// 그리고 주요 리듀서를 스토어에 노출한다.\r\n\r\nconst store = configureStore({\r\n  reducer: { auth: authSlice.reducer, counter: counterSlice.reducer}\r\n});\r\n\r\n//전역으로 액션 객체를 생성한다. 원하는 메서드만 뽑아 와 사용할 수 있게 함.\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\nexport default store;"],"mappings":"AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA2C,kBAA3C;AAGA,MAAMC,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AADM,CAAzB;AAIA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,gBADsB;EAE5BC,YAAY,EAAEJ,gBAFc;EAG5BK,QAAQ,EAAE;IACRC,KAAK,CAACC,KAAD,EAAO;MACVA,KAAK,CAACN,eAAN,GAAwB,IAAxB;IACD,CAHO;;IAIRO,MAAM,CAACD,KAAD,EAAO;MACXA,KAAK,CAACN,eAAN,GAAwB,KAAxB;IACD;;EANO;AAHkB,CAAD,CAA7B;AAcA,MAAMQ,mBAAmB,GAAG;EAAEC,OAAO,EAAG,CAAZ;EAAeC,WAAW,EAAE;AAA5B,CAA5B;AAEA,MAAMC,YAAY,GAAGd,WAAW,CAC9B;EACEK,IAAI,EAAE,SADR;EAEEC,YAAY,EAAEK,mBAFhB;EAGEJ,QAAQ,EAAE;IAERQ,SAAS,CAACN,KAAD,EAAO;MACdA,KAAK,CAACG,OAAN;IACD,CAJO;;IAKRI,SAAS,CAACP,KAAD,EAAO;MACdA,KAAK,CAACG,OAAN;IACD,CAPO;;IAQRK,QAAQ,CAACR,KAAD,EAAQS,MAAR,EAAe;MACrBT,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACG,OAAN,GAAgBM,MAAM,CAACC,OAAvC;IACD,CAVO;;IAWRC,cAAc,CAACX,KAAD,EAAO;MACnBA,KAAK,CAACI,WAAN,GAAoB,CAACJ,KAAK,CAACI,WAA3B;IACD;;EAbO;AAHZ,CAD8B,CAAhC,C,CAyBA;AACA;AACA;AACA;;AAEA,MAAMQ,KAAK,GAAGpB,cAAc,CAAC;EAC3BqB,OAAO,EAAE;IAAEC,IAAI,EAAEnB,SAAS,CAACkB,OAAlB;IAA2BV,OAAO,EAAEE,YAAY,CAACQ;EAAjD;AADkB,CAAD,CAA5B,C,CAIA;;AACA,OAAO,MAAME,cAAc,GAAGV,YAAY,CAACW,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGtB,SAAS,CAACqB,OAA9B;AACP,eAAeJ,KAAf"},"metadata":{},"sourceType":"module"}