{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n}; // toolkit은 기존 상태를 바꿀 수 없게 immer라는 패키지를 자동 적용하여 상태를 복제해준다.\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggoleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducer: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // 리듀서의 값이 단일 리듀서가 될 수 있다.\n// slice가 여러개이더라도 리덕스 스토어는 하나만 존재할 수 있다.\n// 개별적인 여러개의 reducer를 입력하면 나중에 하나의 주요 리듀서로 자동으로 합쳐진다.\n// 그리고 주요 리듀서를 스토어에 노출한다.\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n}); //전역으로 액션 객체를 생성한다. 원하는 메서드만 뽑아 와 사용할 수 있게 함.\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.authActions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggoleCounter","initialAuthState","isAuthenticated","authSlice","reducer","login","logout","store","auth","counterActions","actions","authActions"],"sources":["C:/redux/redux-react/01-starting-project/src/store/index.js"],"sourcesContent":["\r\nimport { createSlice, configureStore} from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter : 0, showCounter: true};\r\n\r\n// toolkit은 기존 상태를 바꿀 수 없게 immer라는 패키지를 자동 적용하여 상태를 복제해준다.\r\nconst counterSlice = createSlice(\r\n  {\r\n    name: 'counter',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n      \r\n      increment(state){\r\n        state.counter++;\r\n      },\r\n      decrement(state){\r\n        state.counter--;\r\n      },\r\n      increase(state, action){\r\n        state.counter = state.counter + action.payload\r\n      },\r\n      toggoleCounter(state){\r\n        state.showCounter = !state.showCounter\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n\r\nconst initialAuthState = {\r\n  isAuthenticated: false\r\n}\r\n\r\nconst authSlice = createSlice({\r\n  name: 'authentication',\r\n  initialState: initialAuthState,\r\n  reducer : {\r\n\r\n    login(state){\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state){\r\n      state.isAuthenticated = false;\r\n    }\r\n    \r\n  }\r\n})\r\n\r\n// 리듀서의 값이 단일 리듀서가 될 수 있다.\r\n// slice가 여러개이더라도 리덕스 스토어는 하나만 존재할 수 있다.\r\n// 개별적인 여러개의 reducer를 입력하면 나중에 하나의 주요 리듀서로 자동으로 합쳐진다.\r\n// 그리고 주요 리듀서를 스토어에 노출한다.\r\n\r\nconst store = configureStore({\r\n  reducer: {counter: counterSlice.reducer, auth: authSlice.reducer}\r\n});\r\n\r\n//전역으로 액션 객체를 생성한다. 원하는 메서드만 뽑아 와 사용할 수 있게 함.\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.authActions;\r\nexport default store;"],"mappings":"AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA2C,kBAA3C;AAEA,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAG,CAAZ;EAAeC,WAAW,EAAE;AAA5B,CAA5B,C,CAEA;;AACA,MAAMC,YAAY,GAAGL,WAAW,CAC9B;EACEM,IAAI,EAAE,SADR;EAEEC,YAAY,EAAEL,mBAFhB;EAGEM,QAAQ,EAAE;IAERC,SAAS,CAACC,KAAD,EAAO;MACdA,KAAK,CAACP,OAAN;IACD,CAJO;;IAKRQ,SAAS,CAACD,KAAD,EAAO;MACdA,KAAK,CAACP,OAAN;IACD,CAPO;;IAQRS,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAe;MACrBH,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;IACD,CAVO;;IAWRC,cAAc,CAACL,KAAD,EAAO;MACnBA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;IACD;;EAbO;AAHZ,CAD8B,CAAhC;AAuBA,MAAMY,gBAAgB,GAAG;EACvBC,eAAe,EAAE;AADM,CAAzB;AAIA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC5BM,IAAI,EAAE,gBADsB;EAE5BC,YAAY,EAAES,gBAFc;EAG5BG,OAAO,EAAG;IAERC,KAAK,CAACV,KAAD,EAAO;MACVA,KAAK,CAACO,eAAN,GAAwB,IAAxB;IACD,CAJO;;IAKRI,MAAM,CAACX,KAAD,EAAO;MACXA,KAAK,CAACO,eAAN,GAAwB,KAAxB;IACD;;EAPO;AAHkB,CAAD,CAA7B,C,CAeA;AACA;AACA;AACA;;AAEA,MAAMK,KAAK,GAAGrB,cAAc,CAAC;EAC3BkB,OAAO,EAAE;IAAChB,OAAO,EAAEE,YAAY,CAACc,OAAvB;IAAgCI,IAAI,EAAEL,SAAS,CAACC;EAAhD;AADkB,CAAD,CAA5B,C,CAIA;;AACA,OAAO,MAAMK,cAAc,GAAGnB,YAAY,CAACoB,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACQ,WAA9B;AACP,eAAeJ,KAAf"},"metadata":{},"sourceType":"module"}