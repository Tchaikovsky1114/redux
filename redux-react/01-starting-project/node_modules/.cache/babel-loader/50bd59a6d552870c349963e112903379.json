{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nexport const INCREMENT = 'increment';\nexport const INCREASE = 'increase';\nexport const DECREMENT = 'decrement';\nexport const TOGGLE = 'toggle';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; // toolkit은 기존 상태를 바꿀 수 없게 immer라는 패키지를 자동 적용하여 상태를 복제해준다.\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggoleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n}); // 리듀서의 값이 단일 리듀서가 될 수 있다.\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n}); //전역으로 액션 객체를 생성한다. 원하는 메서드만 뽑아 와 사용할 수 있게 함.\n\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","INCREMENT","INCREASE","DECREMENT","TOGGLE","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggoleCounter","store","reducer","counterActions","actions"],"sources":["C:/redux/redux-react/01-starting-project/src/store/index.js"],"sourcesContent":["\r\nimport { createSlice, configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nexport const INCREMENT = 'increment'\r\nexport const INCREASE = 'increase'\r\nexport const DECREMENT = 'decrement'\r\nexport const TOGGLE = 'toggle'\r\nconst initialState = { counter : 0, showCounter: true };\r\n\r\n// toolkit은 기존 상태를 바꿀 수 없게 immer라는 패키지를 자동 적용하여 상태를 복제해준다.\r\nconst counterSlice = createSlice(\r\n  {\r\n    name: 'counter',\r\n    initialState,\r\n    reducers: {\r\n      increment(state){\r\n        state.counter++;\r\n      },\r\n      decrement(state){\r\n        state.counter--;\r\n      },\r\n      increase(state, action){\r\n        state.counter = state.counter + action.payload\r\n      },\r\n      toggoleCounter(state){\r\n        state.showCounter = !state.showCounter\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\n\r\n\r\n// 리듀서의 값이 단일 리듀서가 될 수 있다.\r\nconst store = configureStore({\r\n  reducer: counterSlice.reducer\r\n});\r\n\r\n//전역으로 액션 객체를 생성한다. 원하는 메서드만 뽑아 와 사용할 수 있게 함.\r\nexport const counterActions = counterSlice.actions;\r\n\r\nexport default store;"],"mappings":"AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA2C,kBAA3C;AAIA,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,MAAM,GAAG,QAAf;AACP,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAG,CAAZ;EAAeC,WAAW,EAAE;AAA5B,CAArB,C,CAEA;;AACA,MAAMC,YAAY,GAAGT,WAAW,CAC9B;EACEU,IAAI,EAAE,SADR;EAEEJ,YAFF;EAGEK,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAD,EAAO;MACdA,KAAK,CAACN,OAAN;IACD,CAHO;;IAIRO,SAAS,CAACD,KAAD,EAAO;MACdA,KAAK,CAACN,OAAN;IACD,CANO;;IAORQ,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAe;MACrBH,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,OAAvC;IACD,CATO;;IAURC,cAAc,CAACL,KAAD,EAAO;MACnBA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;IACD;;EAZO;AAHZ,CAD8B,CAAhC,C,CAuBA;;AACA,MAAMW,KAAK,GAAGlB,cAAc,CAAC;EAC3BmB,OAAO,EAAEX,YAAY,CAACW;AADK,CAAD,CAA5B,C,CAIA;;AACA,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAApC;AAEP,eAAeH,KAAf"},"metadata":{},"sourceType":"module"}